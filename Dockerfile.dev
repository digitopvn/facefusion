# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/engine/reference/builder/

ARG NODE_VERSION=18.18

################################################################################
# Use node image for base image for all stages.
FROM node:${NODE_VERSION} as base

# Set working directory for all build stages.
WORKDIR /usr/src/python-app

RUN apt-get update 
RUN apt-get install curl -y 
RUN apt-get install ffmpeg -y 

# Install Python.
RUN apt-get update && \
    apt-get install -y --no-install-recommends software-properties-common dirmngr gnupg-agent && \
    apt-get install -y python3.10 python3-venv python3-dev gcc 

RUN which python3.10 || true

ENV GRADIO_SERVER_NAME=0.0.0.0

# RUN git clone https://github.com/digitopvn/facefusion.git --branch dev/tam --single-branch --depth 1 facefusion

# Create a virtual environment
RUN python3 -m venv /venv

# Activate the virtual environment before installing packages
RUN . /venv/bin/activate && pip install inquirer insightface opennsfw2 tensorflow && \
    pip install basicsr facexlib && \
    pip install realesrgan 

COPY . .

RUN . /venv/bin/activate && \ 
    python3 install.py --torch cpu --onnxruntime default && \
    pip install -r requirements.txt && \
    python3 setup.py develop 

# first run for download model
RUN . /venv/bin/activate && python run.py --face-mask-blur 0.1 --face-enhancer-model gfpgan_1.4 --output-image-quality 100 --face-analyser-order left-right --face-selector-mode reference --headless --temp-frame-format png -s "./init-image/source.jpg" -t "./init-image/target.png" -o "./init-image/output.png" --headless

RUN . /venv/bin/activate && python inference_gfpgan.py -v 1.4 -s 1 --ext jpg -i "./init-image/source.jpg" -o "./init-image/upscale.jpg"

CMD ["echo", "build success"]